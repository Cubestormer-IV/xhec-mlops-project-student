import pandas as pd
import mlflow
import mlflow.sklearn
from sklearn.pipeline import Pipeline
from src.modelling.preprocessing import preprocess_data
from utils import load_model
from prefect import task

@task(name="predict", tags=['fails'], retries=3, retry_delay_seconds=60)
def predict(pipeline, X_train, X_test, y_train, y_test) -> None:
    
    """
    Uses a trained model pipeline to make predictions on the test dataset.

    This function takes a pre-trained model pipeline and applies it to the test data
    to generate predictions. The pipeline includes both preprocessing steps and the model itself.
    Predictions are made on the provided test data (X_test).

    Args:
        pipeline: The pipeline containing both the preprocessing steps and the model.
        X_train (pd.DataFrame): Training data (not used here but included for consistency).
        X_test (pd.DataFrame): Test data on which predictions will be made.
        y_train (pd.Series): Training labels (not used here).
        y_test (pd.Series): Test labels (not used here).

    Returns:
        prediction (np.ndarray): Predictions generated by the model on the test data.
    """
    # Load the model
    model = pipeline
    prediction = model.predict(X_test)
    return prediction




if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Predict using the trained model.")
    parser.add_argument("data_path", type=str, help="Path to the data for prediction")
    parser.add_argument("model_uri", type=str, help="URI of the trained model in MLflow")
    args = parser.parse_args()
    predict(args.data_path, args.model_uri)
